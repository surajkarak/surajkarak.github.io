<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://surajkarak.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://surajkarak.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-09-05T17:30:23+00:00</updated><id>https://surajkarak.github.io/feed.xml</id><title type="html">Suraj Karakulath</title><subtitle>Suraj Karakulath Data Scientist. </subtitle><entry><title type="html">Vibe coding is scary</title><link href="https://surajkarak.github.io/blog/vibe-coding/" rel="alternate" type="text/html" title="Vibe coding is scary"/><published>2025-05-13T10:02:23+00:00</published><updated>2025-05-13T10:02:23+00:00</updated><id>https://surajkarak.github.io/blog/vibe-coding</id><content type="html" xml:base="https://surajkarak.github.io/blog/vibe-coding/"><![CDATA[<p>As with most AI-related trends these days, my first instinct was to treat “vibe coding” as another buzzword created by techbros, purely for marketing and piling on the hype to inflate the bubble.</p> <p>But like ChatGPT, I thought there might be some practical use to some of the tools that were mentioned in the same breath so I decided to check them out. I tried tinkering with <a href="https://www.cursor.com/"><strong>Cursor</strong></a>, <a href="https://github.com/features/copilot"><strong>GitHub</strong></a> Copilot, <a href="https://lovable.dev/"><strong>Lovable</strong></a> and other GenAI tools for a few personal projects. And I landed on a couple of realizations:</p> <h3 id="1-its-scary-good">1. It’s scary good</h3> <p>Scary good how it can get you from idea to mockup in minutes, purely through natural language prompts. This is especially powerful if you use the agent mode to apply code changes directly.</p> <p>I was able to generate a mockup of the basic features I wanted in a web app exactly as I had in mind. And I was not even rigorous in my description of the features, or even in the mental models for how the various features interacted.</p> <p>We’re going to see the time from idea to mockup shrink dramatically. In fact, it’s already happening. Even for experienced developers, coders and data scientists, vibe coding can speed up some of the mundane tasks and focus on the overall logic and workflow. I myself have experienced this in my data science work. The number of times I would forget something as simple as the syntax for filtering rows from a dataframe or joining two tables in an SQL query can be annoying, especially when switching between languages. With vibe coding, I can just avoid the mental load for this and quickly describe in natural language prompt, so I can focus on the downstream tasks like training ML models.</p> <p>Some programmers even take a pseudo-code approach instead of pure natural language prompts and get the correct syntax from the LLM. (”def function(dataframe, feature, number): loop from 1 to number: dataframe[column].average() and return average”)</p> <p>For creatives, designers, makers and entrepreneurs, this opens up so much more power to express themselves. Think of a product designer or SaaS founder who is full of ideas but struggle with coding skills, bandwidth and finding technical co-founders or engineers to implement a prototype before going all in. It’s reminiscent of the “bicycle for the mind” metaphor, except it’s much more than a bicycle.</p> <h3 id="2-its-scary-bad">2. It’s scary bad</h3> <p>Vibe coding can also lead you down an endless loop of misery and frustration if you don’t know what you are doing.</p> <p>In my case, I tried testing how far I could push things after the initial mockup, and kept going: ”Now I want X”, “Add this feature Y too” – still through natural language prompts and still relying on the agent to apply changes without my intervention. I found that this would often result in some correct changes being applied but something else breaking in the process, even things that were already working in the mockup. Now if I had slowed down, added one feature at a time, and asked for more clarity on how to implement each step before proceeding, I’m sure I’d have had better results.</p> <p>This is an ongoing conversation among technology professionals. By nature and in general, we are particular about the details and emphasise rigour and care in the process. But LLM tools tend to give the impression that we can sit back and get to the desired end result without worrying about the details. Which means that when things break in the vibe coding process, it will be necessary to go through individual steps, read every line of code and compare the diffs generated by the AI - which eventually takes more time than a normal process (sans the vibes).</p> <p>So far, my observations with vibecoding are:</p> <ul> <li>If you just want to get from idea to prototype, it’s great - so go full steam ahead</li> <li>For better, more reliable results on more complex projects, you will need embrace friction and go in small increments.</li> <li>Sound prompt engineering practices do make a difference. This means being as clear and detailed as possible with requirements: context, caveats, constraints. Not just in crafting the best prompts to get things done on autopilot but also in knowing when to slow down, take the wheel for bit and prompt with caution.</li> <li>Good ideas will still be valued, as starting points for products, and will be critical in standing out from AI slop</li> <li>Those with technical skills, deep conceptual understanding and experience will still be valued, especially when things break and someone has to step in to fix stuff.</li> </ul>]]></content><author><name></name></author><category term="productivity"/><category term="vibe-coding"/><summary type="html"><![CDATA[In a good way and a bad way]]></summary></entry><entry><title type="html">On context switching and some helpful tools</title><link href="https://surajkarak.github.io/blog/context-switching/" rel="alternate" type="text/html" title="On context switching and some helpful tools"/><published>2024-03-29T09:04:16+00:00</published><updated>2024-03-29T09:04:16+00:00</updated><id>https://surajkarak.github.io/blog/context-switching</id><content type="html" xml:base="https://surajkarak.github.io/blog/context-switching/"><![CDATA[<p>Over the last two years and a bit more, I have had to work on more things that were significantly different from each other than before. And I have come to experience the real toll that the mind suffers when context switching.</p> <p>It’s one thing to be absorbed in work all day and feel tired in the evening. But when that work is not of the same “type”, it can be even more mentally draining. Let me illustrate what I mean by this.</p> <p>Let’s say that your daily routine, whether it is a 9 to 5 job, or any kind, involves you doing work in that time period. If you are engaged in the same “kind” of work – coding, designing, writing, speaking whatever – as long as you stick to it, you don’t often have to make a significant mental switch. You will still need to take breaks, rest and get back to what you were doing, but you will still be resuming the same context when you do.</p> <p>But when the type of work you return to is different, or you have to switch between different types of work frequently, that switching can take a slight toll on the mind every time, and it can add up to a lot on top of the usual weariness by the end of the day.</p> <p>For example, in the last two to three years, I have had to spend a lot of time on each of the following tasks at least once, almost every single day:</p> <ul> <li><strong>Work</strong> - where I have had to analyse data, develop ML models and design dashboards, which has involved attending meetings, working on product and code and communicating with various stakeholders over email, Slack and other messaging tools.</li> <li><strong>Reading</strong> - keeping up with the latest developments in tech and AI – LLMs, AI Agents and more</li> <li><strong>Learning</strong> - mainly reinforcing fundamental statistics and math concepts</li> <li><strong>Coursework</strong> - in the form of homework assignments, assessments and thesis for my Master’s programme.</li> <li><strong>Coding</strong> – either for coursework or sideprojects, and it exercises a different part of my brain compared to other types of assignments like researching and reading.</li> <li><strong>Writing</strong> – this includes spending time thinking and putting those thoughts into words</li> <li><strong>Paperwork</strong> - Dealing with German bureaucracy and logistics</li> <li><strong>Language learning</strong> (German) – this started off with Duolingo in 2020, then progressed to in-person classes at my university, reading textbooks and tests myself and finding language partners to practice speaking</li> <li><strong>Sideprojects</strong> – other ideas for coding and data science projects outside of my actual work, for which I had to find inspiration, read up on even more tools and frameworks, come up with ideas and testing and implementing in code</li> </ul> <p>Almost all of these exercise a different muscle in the brain and I found it hard to switch between one to the other.</p> <p>Some simple “mental tools” that I found helpful at some points (I’ll be honest, it’s always a struggle and they don’t work every time) are as follows:</p> <ul> <li><strong>Pomodoro timer:</strong> I set a timer on https://pomofocus.io/ for a session (initially, 25 minutes, then I bumped it to 30 and eventually 1 hour). Not so much for focusing on a task as most people do, but to have that psychological nudge to keep at something. I don’t always stick to finishing a session but it’s some kind of small, atomic, extrinsic motivation to see the time go by as I work no something. And it also helps seeing how much time I have spent in total at the end of the day on various tasks.</li> <li><strong>Telling myself that I only need to finish a small, tiny step</strong>: So often, I have tried to get started on a new task after switching from another one of a different context, and got stuck trying to find the dopamine boost. The slight bit of unfamiliarity in the new task, or memories of being stuck on the last problem in that task or other frictions or the effort to try and recall where exactly I was have led to me spending minutes trying to force myself to focus but failing. In times like these, sometimes I have managed to overcome this block by telling myself that I only need to go to the last line of the code or write-up and make one minor incremental progress. As I do this, my focus slowly begins to grow and I end up spending more time and making more progress.</li> <li><strong>Power naps:</strong> I have found immense value in taking a power nap in the middle of the day. I realised that my lack of motivation and focus started around the middle of the day, after I had spent a lot of time thinking in the morning. By around noon my brain is often cluttered with various thoughts, confusing ideas and distractions. A power nap helps cleanse it and declutter the cobwebs so to speak, almost deleting memories, concerns and irrelevant thoughts, or a kind of factory reset.</li> <li><strong>Long walks/runs</strong>: At the end of the day, I am usually grumpy and exhausted but only mentally. Physically though, I am usually craving for some movement. I have found that just getting out and going for walks (during which I also do short sprints) helps me clear my mind a little. I am not always trying to do any cleansing but the opposite – I just let my mind wander off wherever it wants to go. I don’t practice mindfulness or meditation but I have heard some people talk about “walking meditation” and I have a feeling this might be what I am doing, without realising it. Anyway, once I return from the walk, I am usually feeling much better, my mind is a little cleared up and the well-known endorphin high is also working its thing – all of which together make it easier to get back into doing something productive.</li> </ul>]]></content><author><name></name></author><category term="productivity"/><category term="context-switching"/><summary type="html"><![CDATA[How I try to deal with this silent productivity killer]]></summary></entry></feed>